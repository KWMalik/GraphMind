package com.graphmind
{
	import com.graphmind.data.NodeItemData;
	import com.graphmind.data.ViewsCollection;
	import com.graphmind.data.ViewsList;
	import com.graphmind.display.NodeItem;
	import com.graphmind.net.SiteConnection;
	import com.graphmind.temp.TempItemLoadData;
	import com.graphmind.temp.TempViewLoadData;
	import com.graphmind.util.Log;
	
	import flash.display.StageDisplayState;
	import flash.events.MouseEvent;
	
	import mx.collections.ArrayCollection;
	import mx.controls.Alert;
	import mx.core.Application;
	import mx.core.UIComponent;
	import mx.events.ListEvent;
	import mx.events.StateChangeEvent;
	import mx.rpc.events.ResultEvent;
	
	public class StageManager
	{
		private static var _instance:StageManager = null;
		
		private var _application:GraphMind = null;
		public var lastSelectedNode:NodeItem = null;
		public var baseNode:NodeItem = null;
		[Bindable]
		public var selectedNodeData:ArrayCollection = new ArrayCollection();
		
		public function StageManager() {
		}
		
		public static function getInstance():StageManager {
			if (_instance == null) {
				_instance = new StageManager();
			}
			
			return _instance;
		}
		
		public function initStage(application:GraphMind):void {
			this._application = application;
			
			this._application.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, onCurrentStateChange);
			
			// Scroll mindmap canvas to center
			_application.desktop_wrapper.verticalScrollPosition = 800;
		}
		
		public function loadBaseNode():void {
			ConnectionManager.getInstance().nodeLoad(
				GraphMindManager.getInstance().getHostNodeID(), 
				GraphMindManager.getInstance().baseSiteConnection, 
				_loadBaseNode_stage_node_loaded
			);
		}
		
		private function _loadBaseNode_stage_node_loaded(result:ResultEvent):void {
			// ! Removed original data object: result.result.
			// This caused a mailformed export string.
			var itemData:NodeItemData = new NodeItemData({}, NodeItemData.NODE, GraphMindManager.getInstance().baseSiteConnection);
			itemData.type = NodeItemData.NODE;
			itemData.title = result.result.title;
			var nodeItem:NodeItem = new NodeItem(itemData);
			
			if (result.result.body_value.toString().length > 0) {
				var importedBaseNode:NodeItem = ImportManager.getInstance().importMapFromString(baseNode, result.result.body_value);
				addChildToStage(importedBaseNode);
				baseNode = importedBaseNode;
			} else {
				addChildToStage(nodeItem);
				baseNode = nodeItem;
			}
			
			refreshNodePositions();
		}		
		
		public function onCurrentStateChange(event:StateChangeEvent):void {
			Log.info('state changed');
		}
		
		public function onDataGridItemClick_baseState(event:ListEvent):void {
			if (event.itemRenderer.data is ViewsCollection) {
				(event.itemRenderer.data as ViewsCollection).handleDataGridSelection();
			} else {
				Log.warning('onDataGridItemClick_baseState event is not ViewsCollection.');
			}
		}
		
		/**
		 * Select a views from datagrid on the views load panel.
		 */
		public function onDataGridItemClick_loadViewState(event:ListEvent):void {
			Log.info('onDataGridItemClick_loadViewState');
			var selectedViewsCollection:ViewsCollection = event.itemRenderer.data as ViewsCollection;
			
			stage.view_name.text = selectedViewsCollection.name;
		}
		
		public function onConnectFormSubmit():void {
			var sc:SiteConnection = SiteConnection.createSiteConnection(
				_application.connectFormURL.text,
				_application.connectFormUsername.text,
				_application.connectFormPassword.text
			);
			ConnectionManager.getInstance().connectToSite(sc);
		}
		
		public function addChildToStage(element:UIComponent):void {
			_application.desktop.addChild(element);
			refreshNodePositions();
		}
		
		public function get stage():GraphMind {
			return this._application;
		}
		
		public function onLoadViewSubmitClick(event:MouseEvent):void {
			//var viewsList:ViewsList = new ViewsList();
			var viewsData:ViewsList = new ViewsList();
			viewsData.args   	= stage.view_arguments.text;
			viewsData.fields 	= stage.view_fields.text;
			viewsData.limit     = parseInt(stage.view_limit.text);
			viewsData.offset    = parseInt(stage.view_offset.text);
			viewsData.view_name = stage.view_name.text;
			viewsData.parent    = stage.view_views_datagrid.selectedItem as ViewsCollection;
			
			var loaderData:TempViewLoadData = new TempViewLoadData();
			loaderData.viewsData = viewsData;
			loaderData.nodeItem = lastSelectedNode;
			loaderData.success  = onViewsItemsLoadSuccess;
			
			ConnectionManager.getInstance().viewListLoad(loaderData);
			
			stage.currentState = '';
		}
		
		public function onLoadViewCancelClick(event:MouseEvent):void {
			stage.currentState = '';
		}
		
		public function onLoadItemSubmitClick(event:MouseEvent):void {
			var nodeItemData:NodeItemData = new NodeItemData(
				{},
				stage.item_type.selectedItem.data,
				stage.item_source.selectedItem as SiteConnection
			);
			nodeItemData.drupalID = parseInt(stage.item_id.text);
			
			var loaderData:TempItemLoadData = new TempItemLoadData();
			loaderData.nodeItem = lastSelectedNode;
			loaderData.nodeItemData = nodeItemData;
			loaderData.success = onItemLoadSuccess;
			
			ConnectionManager.getInstance().itemLoad(loaderData);
			
			stage.currentState = '';
		}
		
		public function onLoadItemCancelClick(event:MouseEvent):void {
			stage.currentState = '';
		}
		
		public function onViewsItemsLoadSuccess(list:Array, requestData:TempViewLoadData):void {
			if (list.length == 0) {
				Alert.show('Zero result.');
			}
			for each (var nodeData:Object in list) {
				var nodeItemData:NodeItemData = new NodeItemData(
					nodeData, 
					requestData.viewsData.parent.baseTable, 
					requestData.viewsData.parent.source
				);
				var nodeItem:NodeItem = new NodeItem(nodeItemData);
				requestData.nodeItem.addNodeChild(nodeItem);
			}
		}
		
		public function onNewNormalNodeClick(parent:NodeItem):void {
			var nodeItemData:NodeItemData = new NodeItemData({}, NodeItemData.NORMAL, SiteConnection.createSiteConnection());
			var nodeItem:NodeItem = new NodeItem(nodeItemData);
			parent.addNodeChild(nodeItem);
			nodeItem.selectNode();
		}
		
		public function onItemLoadSuccess(result:Object, requestData:TempItemLoadData):void {
			requestData.nodeItemData.data = result;
			var nodeItem:NodeItem = new NodeItem(requestData.nodeItemData);
			requestData.nodeItem.addNodeChild(nodeItem);
			nodeItem.selectNode();
		}
		
		public function refreshNodePositions():void {
			if (!baseNode) return;
			baseNode.x = 0;
			baseNode.y = stage.desktop.height >> 1;
			baseNode.refreshChildNodePosition();
		}
		
		public function onExportClick(event:MouseEvent):void {
			var mm:String = GraphMindManager.getInstance().save();
			stage.freemindExportTextarea.text = mm;
		}
		
		public function onAddOrUpdateClick(event:MouseEvent):void {
			if (!lastSelectedNode) baseNode.selectNode();
			
			lastSelectedNode.data[stage.attributes_update_param.text] = stage.attributes_update_value.text;
			lastSelectedNode.selectNode();
			
			stage.attributes_update_param.text = stage.attributes_update_value.text = '';
		}
		
		public function onRemoveAttributeClick(event:MouseEvent):void {
			if (!lastSelectedNode || stage.attributes_update_param.text.length == 0) return;
			
			lastSelectedNode.dataDelete(stage.attributes_update_param.text);
			lastSelectedNode.selectNode();
			
			stage.attributes_update_param.text = stage.attributes_update_value.text = '';
		}
		
		public function toggleFullScreen():void {
			try {
				
				switch (Application.application.stage.displayState) {
					case StageDisplayState.FULL_SCREEN:
						Application.application.stage.displayState = StageDisplayState.NORMAL;
						break;
					case StageDisplayState.NORMAL:
						Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
						break;
				}
			} catch (e:Error) {
				
			}
		}
		
	}
}